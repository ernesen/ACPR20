# Copyright 2019 Avaloq Evolution AG
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- block:
    - name: Create temporary file
      tempfile:
        state: file
        prefix: "ansible.{{ cust_os_cluster_name }}-CA.crt."
      register: tempClusterCA

    - name: Copy certificateAuthority content to temp file
      blockinfile:
        path: "{{ tempClusterCA.path }}"
        block: "{{ item.certificateAuthority }}"
        marker: "# {mark} {{ item.url }} certificate"
      loop: "{{ cust_cluster_credentials }}"
      when: item.certificateAuthority is defined

    - name: Stat temp file
      stat:
        path: "{{ tempClusterCA.path }}"
      register: tempClusterCAstat

    - name: Certification validation
      uri:
        url: "{{ item.url }}"
        validate_certs: "{{ not item.insecureSkipTlsVerify|default(false) }}"
        status_code:
          - 200
          - 403
      loop: "{{ cust_cluster_credentials }}"
      register: output
      ignore_errors: true
      environment:
        SSL_CERT_FILE: "{%if tempClusterCAstat.stat.size != 0 %}{{ tempClusterCA.path }}{%else%}{{ item.certificateAuthorityPath | default('/etc/pki/tls/certs/ca-bundle.crt') }}{%endif%}"

    - name: Fail when certificate validation failed
      fail:
        msg: "Certificate validation failed. Set certificateAuthority or insecureSkipTlsVerify parameters in `cust_cluster_credentials` Ansible variable. See the 'ACPR configuration and cluster installation' topic under https://docs.avaloq.com/acpr"
      loop: "{{ output.results }}"
      when: "'CERTIFICATE_VERIFY_FAILED' in item.msg"

  always:
    - name: Cleanup
      file:
        path: "{{ tempClusterCA.path }}"
        state: absent
