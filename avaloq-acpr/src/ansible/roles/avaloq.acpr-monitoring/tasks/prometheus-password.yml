# Copyright 2019 Avaloq Evolution AG
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Get old Prometheus password
  command: "oc get secret prometheus-htpasswd-plain -n {{ namespace }} -o jsonpath={.data.auth}"
  environment:
    KUBECONFIG: '{{ KUBECONFIG }}'
  register: prometheus_password_secret
  failed_when: false
  changed_when: false

- block:
    - set_fact:
        prometheus_password: "{{ prometheus_password_secret.stdout | b64decode }}"

    - set_fact:
        prometheus_password: "{{ lookup('password', '/dev/null length=14 chars=ascii_letters,digits') }}"
      when:
        - acpr_monitoring_prometheus_password is not defined
        - (prometheus_password == '') or (acpr_monitoring_regenerate_prometheus_password)

    - set_fact:
        prometheus_password: "{{ acpr_monitoring_prometheus_password }}"
      when:
        - acpr_monitoring_prometheus_password is defined

    - block:
        - tempfile:
            state: file
            suffix: _htpasswd_credentials
          register: htpasswd_file
          loop:
            - prometheus
            - alertmanager

        - set_fact:
            prometheus_htpasswd: "{{ htpasswd_file.results[0].path }}"

        - set_fact:
            alertmanager_htpasswd: "{{ htpasswd_file.results[1].path }}"

        - htpasswd:
            path: "{{ prometheus_htpasswd }}"
            name: "{{ prometheus_user }}"
            password: "{{ prometheus_password }}"
            crypt_scheme: ldap_sha1

        - htpasswd:
            path: "{{ prometheus_htpasswd }}"
            name: "{{ item.username }}"
            password: "{{ item.password }}"
            crypt_scheme: ldap_sha1
          loop: "{{ acpr_monitoring_prometheus_additional_auth.htpasswd.accounts|flatten(levels=1) }}"
          when:
            - acpr_monitoring_prometheus_additional_auth.htpasswd.accounts is defined

        - htpasswd:
            path: "{{ alertmanager_htpasswd }}"
            name: "{{ item.username }}"
            password: "{{ item.password }}"
            crypt_scheme: ldap_sha1
          loop: "{{ acpr_monitoring_alertmanager_additional_auth.htpasswd.accounts|flatten(levels=1) }}"
          when:
            - acpr_monitoring_alertmanager_additional_auth.htpasswd.accounts is defined

        - set_fact:
            prometheus_credentials_sha1: "{{ lookup('file', prometheus_htpasswd) }}"

        - set_fact:
            alertmanager_credentials_sha1: "{{ lookup('file', alertmanager_htpasswd) }}"

      always:
        - file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ prometheus_htpasswd }}"
            - "{{ alertmanager_htpasswd }}"
