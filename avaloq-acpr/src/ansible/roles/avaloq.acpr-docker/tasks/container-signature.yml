# Copyright 2019 Avaloq Evolution AG
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Install and configure atomic
  become: true
  block:
    - name: Install required packages
      yum:
        name: atomic
        state: latest

    - name: Get Atomic trust status
      block:
        - command: atomic trust show --json
          register: atomic_trust_output
          changed_when: false
        - set_fact:
            atomic_trust: "{{ atomic_trust_output.stdout | from_json }}"
        - set_fact:
            atomic_trust_type: "{{ atomic_trust[\"* (default)\"][\"type\"] }}"

    - name: Update docker configuration
      replace:
        path: /etc/sysconfig/docker
        regexp: 'signature-verification=([Tt]rue|[Ff]alse)'
        replace: "signature-verification={{ acpr_docker_signature_verification | default('false') }}"
      notify:
        - restart docker

    - name: Delete all existing policies
      command: "atomic trust delete \"{{ item.key }}\""
      loop: "{{ lookup('dict', atomic_trust, wantlist=True) }}"
      when: item.key != "* (default)"

    - block:
        - name: Copy all required public keys
          block:
            - file:
                path: '{{ item }}'
                state: absent
              loop:
                - /etc/pki/acpr-gpg
                - /etc/containers/registries.d
            - file:
                path: '{{ item }}'
                state: directory
              loop:
                - /etc/pki/acpr-gpg
                - /etc/containers/registries.d
            - copy:
                dest: "/etc/pki/acpr-gpg/{{ item.1 | hash('sha1') }}"
                content: "{{ item.1 }}"
              loop: "{{ lookup('subelements', acpr_container_images_registries, 'pubkeys', {'skip_missing': True}, wantlist=True) }}"

            # Because of some limitations of Ansible with nested loops, we have to copy namespace pubkeys this way
            - include_role:
                name: avaloq.acpr-docker
                tasks_from: helpers/add-registry-public-key.yml
              loop: "{{ lookup('subelements', acpr_container_images_registries, 'namespace_configuration', {'skip_missing': True}, wantlist=True) }}"
              when:
                - item.1.pubkeys is defined
                - item.1.trust_type == "signedBy"
          become: true

        - name: Change Atomic trust policy
          block:
            ## Configure registries
            - command: "atomic trust add {% if item.value.trust_type  | default('reject') == \"signedBy\" %}{% for pubkey in item.value.pubkeys %} -f /etc/pki/acpr-gpg/{{ pubkey  | hash('sha1')}}{% endfor %} --sigstoretype {{ item.value.sigstore_type | default('web') }} --sigstore {{ item.value.sigstore | urlsplit('scheme') }}://{% if item.value.sigstore_username is defined and item.value.sigstore_password is defined %}{{ item.value.sigstore_username }}:{{ item.value.sigstore_password }}@{%endif%}{{ item.value.sigstore | urlsplit('hostname') }}{{ item.value.sigstore | urlsplit('path') }}{% endif %} --type {{ item.value.trust_type  | default('reject') }} \"{{ item.value.host }}\""
              loop: "{{ lookup('dict', acpr_container_images_registries, wantlist=True) }}"
              when:
                - item.value.host is defined
              no_log: true

            ## Configure namespaces
            - command: "atomic trust add {% if item.1.trust_type  | default('reject') == \"signedBy\" %}{% for pubkey in item.1.pubkeys | default(item.0.pubkeys) %} -f /etc/pki/acpr-gpg/{{ pubkey  | hash('sha1') }}{% endfor %} --sigstoretype {{ item.1.sigstore_type | default(item.0.sigstore_type) | default('web') }} --sigstore {{ item.1.sigstore | default(item.0.sigstore) | urlsplit('scheme') }}://{% if item.1.sigstore_username is defined and item.1.sigstore_password is defined %}sem{%if item.1.sigstore_username | length and item.1.sigstore_password | length %}{{ item.1.sigstore_username }}:{{ item.1.sigstore_password }}@{%endif%}{%elif item.0.sigstore_username is defined and item.0.sigstore_password is defined %}{{ item.0.sigstore_username }}:{{ item.0.sigstore_password }}@{%endif%}{{ item.1.sigstore | default(item.0.sigstore) | urlsplit('hostname') }}{{ item.1.sigstore | default(item.0.sigstore) | urlsplit('path') }}{% endif %} --type {{ item.1.trust_type  | default('reject') }} \"{{ item.0.host }}/{{ item.1.name }}\""
              loop: "{{ lookup('subelements', acpr_container_images_registries, 'namespace_configuration', {'skip_missing': True}, wantlist=True) }}"
              when:
                - item.1.name is defined
                - item.0.host is defined
              no_log: true
      when:
        - acpr_container_images_signature_verification

    - name: Change Atomic trust status
      command: atomic trust default {{ acpr_atomic_default_trust_policy | default('reject') }}
      changed_when:
        - atomic_trust_type != acpr_atomic_default_trust_policy
