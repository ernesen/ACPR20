# "{{ ansible_managed }}"
#/etc/haproxy/haproxy.cfg
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000



frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s

frontend openshift-api-server
    bind *:6443
    default_backend openshift-api-server
    mode tcp
    option tcplog

frontend ingress-https
    bind *:443
    mode tcp
    option tcplog
    use_backend openshift-api-server if { req_ssl_sni -i api.{{ os_cluster_name }} }
    default_backend ingress-https

frontend machine-config-server
    bind *:22623
    default_backend machine-config-server
    mode tcp
    option tcplog

backend openshift-api-server
    balance source
    mode tcp
    option httpchk GET /readyz
{% for node in acpr_cluster_nodes %}
{% if node.role == "bootstrap" or node.role == "master" %}
    server {{ node.name.split(".")[0] }} {{ lookup('dig', node.name) }}:6443 check check-ssl verify none inter 1s fall 1 rise 2
{% endif %}
{% endfor %}

backend machine-config-server
    balance source
    mode tcp
    option httpchk GET /healthz
{% for node in acpr_cluster_nodes %}
{% if node.role == "bootstrap" or node.role == "master" %}
    server {{ node.name.split(".")[0] }} {{ lookup('dig', node.name) }}:22623 check check-ssl verify none inter 1s fall 1 rise 2
{% endif %}
{% endfor %}

backend ingress-https
    balance source
    mode tcp
{% for node in acpr_cluster_nodes %}
{% if node.role == "worker" and node.labels is defined and "acpr.avaloq.com/ingress-node" in node.labels %}
    server {{ node.name.split(".")[0] }} {{ lookup('dig', node.name) }}:443 check check-ssl verify none inter 1s fall 1 rise 2
{% endif %}
{% endfor %}
